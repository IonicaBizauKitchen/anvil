#!/bin/bash
#
#/ Usage: deploy [-b]
#/
#/   -b   Recompile the compiler using itself before deploying

ANVIL_PRODUCTION="https://anvil.herokuapp.com"
ANVIL_STAGING="https://anvil-staging.herokuapp.com"

echo() {
  /bin/echo $*
}

error() {
  /bin/echo $*; exit 1
}

# make sure we have the right env vars
check_env() {
  [[ ${!1} ]] || error "Environment variable ${1} is not set."
}

usage() {
  cat $0 | grep '^#/' | cut -c4-
}

root=$(dirname $(dirname $0))

# fail fast
set -o errexit
set -o pipefail

bootstrap=""

while getopts "hb" opt; do
  case $opt in
    b) bootstrap="1"; ;;
    h) usage; exit 0 ;;
    ?) usage; exit 0 ;;
  esac
done

check_env AWS_ACCESS
check_env AWS_SECRET
check_env S3_BUCKET

echo -n "Creating build using old compiler... "
build=$(env ANVIL_HOST=${ANVIL_PRODUCTION} heroku build $root -p 2>$root/log/deploy.log)
heroku release $build -a anvil-staging >$root/log/deploy.log
echo "done"

if [ "bootstrap" == "1" ]; then
  echo -n "Creating build using new compiler that was built with old compiler... "
  build=$(env ANVIL_HOST=${ANVIL_STAGING} heroku build $root -p 2>$root/log/deploy.log)
  heroku release $build -a anvil-staging >$root/log/deploy.log
  echo "done"

  echo -n "Creating build using new compiler that was built with new compiler... "
  build=$(env ANVIL_HOST=${ANVIL_STAGING} heroku build $root -p 2>$root/log/deploy.log)
  heroku release $build -a anvil-staging >$root/log/deploy.log
  echo "done"
else
  echo -n "Releasing new compiler to staging... "
  heroku release $build -a anvil-staging >$root/log/deploy.log
  echo "done"
fi

echo -n "Releasing new compiler to production... "
heroku release $build -a anvil >$root/log/deploy.log
echo "done"

echo -n "Uploading build to S3... "
downloaded=$(mktemp -t build_XXXXX)
curl -s $build -o $downloaded
$root/bin/s3 put $downloaded /software/production/anvil.img >/dev/null 2>&1
echo "done"
