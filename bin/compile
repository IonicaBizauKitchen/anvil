#!/bin/bash

# fail fast
set -o errexit
set -o pipefail

compile_dir=$1

chr () {
  [ ${1} -lt 256 ] || return 1
  printf \\$(($1/64*100+$1%64/8*10+$1%8))
}

# override built-in shell echo
echo() {
  /bin/echo "$1" "$2"
}

on_exit() {
  sleep 1
  printf "\000\042\000\001\\$(printf '%03o' $?)"
}

trap on_exit EXIT

# finish the "Launching build slave..." line
echo "done"

# get root dir
root_dir=$(pwd)

# create a cache dir
cache_dir=$(mktemp -t cache_XXXXX)
rm -rf $cache_dir
mkdir -p $cache_dir

# fetch buildpack
cd $compile_dir
echo -n "Fetching buildpack... "
rm -rf .buildpack; mkdir -p .buildpack;
case $BUILDPACK_URL in
  *.json)
    buildpack_manifest=$(mktemp -t buildpack_manifest_XXXXX)
    curl -s $BUILDPACK_URL -o $buildpack_manifest
    $root_dir/bin/download_manifest $buildpack_manifest .buildpack >/dev/null 2>&1
    ;;
  *.tgz)
    cd .buildpack
    curl -s $BUILDPACK_URL -o- | tar xzf -
    cd ..
    ;;
  *)
    git clone --depth 1 $BUILDPACK_URL .buildpack >/dev/null 2>&1
    ;;
esac
cd $compile_dir
echo "done"

# get buildpack name
echo -n "Detecting buildpack... "
buildpack_name=$(.buildpack/bin/detect "$compile_dir")

# abort if detect failes
if [ $? -eq 0 ]; then
  echo "done, ${buildpack_name}"
else
  echo "failed"
  exit 1
fi

# fetch cache
if [ "$CACHE_URL" != "" ]; then
  echo -n "Fetching cache... "
  cache=$(mktemp -t cache_XXXXX)
  curl -s $CACHE_URL -o $cache
  cd $cache_dir
  tar xzf $cache >/dev/null 2>&1 && echo "done" || echo "empty"
  cd .
fi

# compile
echo "Compiling app..."
cd $compile_dir

.buildpack/bin/compile $compile_dir $cache_dir 2>&1 | \
  sed -le 's/^.\!...../       ERROR: /g' | \
  sed -le "s/^....../ /g"

# write .profile to the top of any existing .profile
echo -n "Writing .profile... "
cat $root_dir/bin/.profile $compile_dir/.profile >$compile_dir/.profile.combined 2>/dev/null
mv $compile_dir/.profile.combined $compile_dir/.profile
echo "done"

# put cache
if [ "$CACHE_URL" != "" ]; then
  echo -n "Putting cache... "
  cd $cache_dir
  tar czf $cache . >/dev/null 2>&1
  cd .
  curl -s -X PUT $CACHE_URL -F data=@$cache >/dev/null
  echo "done"
fi

# make slug
if [ "$SLUG_PUT_URL" != "" ]; then
  echo -n "Creating slug... "
  slug=$(mktemp -t slug_XXXXX).img
  mksquashfs $compile_dir $slug -all-root >/dev/null
  echo "done"

  echo -n "Uploading slug... "
  curl -s -T $slug "$SLUG_PUT_URL"
  echo "done"

  echo "Success, slug is ${SLUG_URL}"
else
  echo "Success"
fi
